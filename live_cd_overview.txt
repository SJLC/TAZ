Every year: new gentoo ebuilds are downloaded and tbz2's are created, and from this a new livecd/usb iso is made.
tbz2's are made and then stored at the github live cd project site (ecomputing/TAZ);

The x86 bootable archives for livecd folder and the x86_64 bootable archives folder will both contain 
the 8 different bootable archives to be started at boot. The bootable archives will be squashfs archives.

Operating principles of the live cd:

A boot screen is shown, displaying the 8 different boot options, knowingly:
Boot setup 1: core programs only
Boot setup 2: core programs + system-config-printer + abiword + gnumeric
Boot setup 3: core programs + impressive
Boot setup 4: core programs + inkscape
Boot setup 5: core programs + GIMP
Boot setup 6: core programs + alsaplayer
Boot setup 7: core programs + mpv
Boot setup 8: core programs + Claws mail
this technique is similar to http://doc.slitaz.org/en:guides:manyinone
after selecting one of these options, it will copy all data of this setup option (core programs= 1 compressed file, additional
programs = 1 additional compressed file) to RAM (tmpfs) , and then boot this setup. 
The benefit of this approach is that the amount of RAM needed for the PC can remain relatively low, and the operating system
will also be much faster

Read/write abilities:
Since cd-r's are read-only, the operating system never changes (between boots) and can't become insecure.
Upon boot, the data is written to ram (--> it will copy the archives to tmpfs so it runs from RAM), hence allowing the
introduction of settings (for example to add log-in data to gajim, data for printer detection, ... so these can effectively be
used). This login data will need to be entered every time the operating system is restarted, as settings are not storable. The
browser will similarly lose all its history data with every restart, but during use, it will keep history data.
Any important data generated (i.e. text documents, spreadsheets, powerpoint presentations, ...) can be saved to a usb stick.

A usb stick could potentially also be used to store additional packages (ie drivers for certain hardware like graphics cards -if
he wants better support than the standard x vesa-, printers, scanners, modems, ...) and settings. Any programs that require the
presence of special drivers (i.e. Blender, ...) could also be added. This could be done by having a
9th boot setup added to the livecd/liveusb which tells the system to include any squashfs archives placed on a usb stick in one
of the free usb ports. No such boot setup will be present in the standard livecd so the user will need to add this manually (and
make a new livecd or liveusb) and will also need to add the required squashfs archives on a usb stick.
An alternative to this is -in case you have MS Windows (XP, 2000, ...) installed to a harddisk- to use MS Windows for those
tasks you can't do in TAZ (due to lack of drivers).

Notes:

Regardless of the boot option chosen, the user will always log in as root, not as a user.
This, as no persistence will be present anyway, so there are no security issues.

The livecd/liveusb won't feature a "install to HD" option as a frugal install (wich means that archives are saved to the HD, yet
are written to RAM/tmpfs at boot) won't allow for persistence anyhow, so there's little point in having this option.
Actually, not having it will also steer its users to not using a HD, meaning it can be omitted in the user's pc. 
Omitting the HD in the pc will make for a more environmentally friendly machine, and is hence a good thing. 
Also, read speed of especially USB's are -although slower than HD's- still pretty high and less than 650 mb needs to be read
anyhow and saved to RAM. So, speed increases (compared to HD's) is -even at this phase-, negligable, and after the save to RAM,
everything is read from RAM, so no speed gains can be had there neither.

A script would be added in /etc/local.d/ that will be started at bootup (in all boot setups). This script would do an execute
command (./) to start a script in /bootscripts/ located on a USB stick (so on one of the USB ports) with several commands
(including a "setxkbmap" command that has priority over the default keymap configuration), . The advantage of this being that 
files on the USB stick can be altered, unlike the on the livecd. This way, people that have a different keyboard can still
correct this.
If no USB stick is detected and thus no /bootscripts folder has been found, then the default keymap should be started
("setxkbmap -layout be")
